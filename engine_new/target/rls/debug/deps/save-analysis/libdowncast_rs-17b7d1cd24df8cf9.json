{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"downcast_rs","disambiguator":[211484235084557223,40073614062035824]},"crate_root":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src","external_crates":[{"file_name":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16692621835102700871,4132427433257767610]}},{"file_name":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12524793597592779104,277443902472728722]}},{"file_name":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17095329744977799216,17019127564122490281]}},{"file_name":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11527612944993163426,967077062142884896]}},{"file_name":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[8400607788147900397,1828563196363218161]}},{"file_name":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13136371596989340053,7057046707285774644]}},{"file_name":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18339306467483213061,11544594849920994639]}},{"file_name":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[16645520015739184186,9355301219838340340]}},{"file_name":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[16158587455994215675,15153114505399599327]}}],"span":{"file_name":[47,104,111,109,101,47,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,119,110,99,97,115,116,45,114,115,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":14746,"line_start":1,"line_end":400,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,119,110,99,97,115,116,45,114,115,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":14746,"line_start":1,"line_end":400,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ron/.cargo/registry/src/github.com-1ecc6299db9ec823/downcast-rs-1.0.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":16},{"krate":0,"index":24}],"decl_id":null,"docs":" Rust enums are great for types where all variations are known beforehand. But in\n the case where you want to implement a container of user-defined types, an\n open-ended type like a trait object is needed. In some cases, it is useful to\n cast the trait object back into its original concrete type to access additional\n functionality and performant inlined implementations.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8},"span":{"file_name":[47,104,111,109,101,47,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,119,110,99,97,115,116,45,114,115,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3892,"byte_end":3900,"line_start":122,"line_end":122,"column_start":11,"column_end":19},"name":"Downcast","qualname":"::Downcast","value":"Downcast: Any","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14}],"decl_id":null,"docs":" Supports conversion to `Any`. Traits to be extended by `impl_downcast!` must extend `Downcast`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":[47,104,111,109,101,47,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,119,110,99,97,115,116,45,114,115,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4101,"byte_end":4109,"line_start":125,"line_end":125,"column_start":8,"column_end":16},"name":"into_any","qualname":"::Downcast::into_any","value":"fn (self: Box<Self>) -> Box<Any>","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Convert `Box<Trait>` (where `Trait: Downcast`) to `Box<Any>`. `Box<Any>` can then be\n further `downcast` into `Box<ConcreteType>` where `ConcreteType` implements `Trait`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":[47,104,111,109,101,47,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,119,110,99,97,115,116,45,114,115,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4292,"byte_end":4298,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"as_any","qualname":"::Downcast::as_any","value":"fn (&self) -> &Any","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Convert `&Trait` (where `Trait: Downcast`) to `&Any`. This is needed since Rust cannot\n generate `&Any`'s vtable from `&Trait`'s.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":[47,104,111,109,101,47,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,119,110,99,97,115,116,45,114,115,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4479,"byte_end":4489,"line_start":131,"line_end":131,"column_start":8,"column_end":18},"name":"as_any_mut","qualname":"::Downcast::as_any_mut","value":"fn (&mut self) -> &mut Any","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Convert `&mut Trait` (where `Trait: Downcast`) to `&Any`. This is needed since Rust cannot\n generate `&mut Any`'s vtable from `&mut Trait`'s.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,119,110,99,97,115,116,45,114,115,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4543,"byte_end":4544,"line_start":134,"line_end":134,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,119,110,99,97,115,116,45,114,115,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3902,"byte_end":3905,"line_start":122,"line_end":122,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2730},"to":{"krate":0,"index":8}},{"span":{"file_name":[47,104,111,109,101,47,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,111,119,110,99,97,115,116,45,114,115,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4543,"byte_end":4544,"line_start":134,"line_end":134,"column_start":27,"column_end":28},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":19},"to":{"krate":0,"index":8}}]}